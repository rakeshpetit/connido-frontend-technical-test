// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Header renders PickerCurrency correctly when there is symbol data 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "white",
      "flexDirection": "row",
      "justifyContent": "space-around",
    }
  }
>
  <View
    style={
      Object {
        "height": 50,
        "width": 100,
      }
    }
  >
    <RCTPicker
      items={
        Array [
          Object {
            "label": "USD",
            "textColor": undefined,
            "value": "USD",
          },
        ]
      }
      onChange={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      selectedIndex={0}
      style={
        Array [
          Object {
            "height": 216,
          },
          undefined,
        ]
      }
    />
  </View>
</View>
`;

exports[`Header renders correctly when there is symbol data 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "white",
      "flexDirection": "row",
      "justifyContent": "space-around",
    }
  }
>
  <View
    style={
      Object {
        "height": 50,
        "width": 100,
      }
    }
  >
    <RCTPicker
      items={
        Array [
          Object {
            "label": "USD",
            "textColor": undefined,
            "value": "USD",
          },
        ]
      }
      onChange={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      selectedIndex={0}
      style={
        Array [
          Object {
            "height": 216,
          },
          undefined,
        ]
      }
    />
  </View>
</View>
`;

exports[`Header renders nothing when there are no symbols 1`] = `
<View
  style={
    Object {
      "alignItems": "center",
      "backgroundColor": "white",
      "flexDirection": "row",
      "justifyContent": "space-around",
    }
  }
>
  <View
    style={
      Object {
        "height": 50,
        "width": 100,
      }
    }
  >
    <RCTPicker
      items={
        Array [
          Object {
            "label": undefined,
            "textColor": undefined,
            "value": undefined,
          },
        ]
      }
      onChange={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      selectedIndex={0}
      style={
        Array [
          Object {
            "height": 216,
          },
          undefined,
        ]
      }
    />
  </View>
</View>
`;
