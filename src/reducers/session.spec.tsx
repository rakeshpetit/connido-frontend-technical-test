import reducer from './session';
import { stateRec } from './state.record';
import * as actions from '../actions/session';

export const SHOW_ERROR_MESSAGE_DONE = 'show_error_message_done';

describe('session reducer', () => {
    it('should return the initial state', () => {
      expect(reducer(undefined, undefined)).toEqual(stateRec);
    });
    it('should set loading to true', () => {
      expect(reducer(undefined, actions.refreshDataStart()))
        .toEqual({...stateRec, loading: true});
    });
    it('should save api data in state', () => {
      const data = {
        'success': true,
        'timestamp': 1537961645,
        'base': 'EUR',
        'date': '2018-09-26',
        'rates': { 'GBP': 0.893093, 'USD': 1.17435, 'INR': 85.270126 }
      };
      expect(reducer(undefined, actions.refreshDataDone(data)))
        .toEqual({...stateRec, loading: false, data});
    });
    it('should save last request data in state', () => {
      const lastDataRequest = 4643234;
      expect(reducer(undefined, actions.lastRequestDone(lastDataRequest)))
        .toEqual({...stateRec, lastDataRequest});
    });
    it('should save symbol data in state', () => {
      const symbolData = {
        'success': true,
        'timestamp': 1537961645,
        'date': '2018-09-26',
        'symbols': {
          'GBP': 'British Pound',
          'USD': 'United States Dollar',
          'INR': 'Indian Rupee' }
      };
      expect(reducer(undefined, actions.refreshSymbolDataDone(symbolData)))
        .toEqual({...stateRec, loading: false, symbolData});
    });
    it('should save destination currency to state', () => {
      const destinationCurrency = 'CAD';
      const userSourceAmount = 0;
      const userDestinationAmount = 0;
      expect(reducer(undefined, actions.setDestinationCurrencyDone(destinationCurrency)))
        .toEqual({...stateRec, destinationCurrency, userSourceAmount, userDestinationAmount});
    });
    it('should save user entered source currency amount to state', () => {
      const userSourceAmount = 150;
      expect(reducer(undefined, actions.setUserSourceAmountDone(userSourceAmount)))
        .toEqual({...stateRec, userSourceAmount});
    });
    it('should save user entered destination currency amount to state', () => {
      const userDestinationAmount = 150;
      expect(reducer(undefined, actions.setUserDestinationAmountDone(userDestinationAmount)))
        .toEqual({...stateRec, userDestinationAmount});
    });
    it('should save error message generated by user to state', () => {
      const errorMessage = 'Error thrown';
      expect(reducer(undefined, actions.showErrorMessageDone(errorMessage)))
        .toEqual({...stateRec, errorMessage});
    });
  });
